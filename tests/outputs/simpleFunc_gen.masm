
__START__:
; prologue
  push bp
  mov bp, sp
  addis sp, -12
  
; load constant 2 into r1
  movi  r1, 2
  
; store r1 to var 'x'
  mov   r3, bp
  addis r3, -4
  store r3, r1
  
; load constant 3 into r1
  movi  r1, 3
  
; store r1 to var 'y'
  mov   r3, bp
  addis r3, -8
  store r3, r1
  
; load constant 0 into r1
  movi  r1, 0
  
; store r1 to var 'z'
  mov   r3, bp
  addis r3, -12
  store r3, r1
  
; load local 'x' into r2
  mov   r3, bp
  addis r3, -4
  load  r2, r3
  
; load constant 0 into r3
  movi  r3, 0
  cmp r2, r3
  jg b_L_then_0
  jmp b_L_end_0
b_L_then_0:
  
; load local 'x' into r5
  mov   r3, bp
  addis r3, -4
  load  r5, r3
  
; load local 'y' into r6
  mov   r3, bp
  addis r3, -8
  load  r6, r3
  
; load constant 10 into r7
  movi  r7, 10
  call f_add3
  
; store r1 to var 'z'
  mov   r3, bp
  addis r3, -12
  store r3, r1
  jmp b_L_end_0
b_L_end_0:
  
; load local 'z' into r1
  mov   r3, bp
  addis r3, -12
  load  r1, r3
  
; return
  addis sp, 12
; epilogue
  pop  bp
  halt
f_add3:
; prologue
  push bp
  mov bp, sp
  addis sp, -12
  ; store parameter 'a' from register r5
  mov   r3, bp
  addis r3, -4
  store r3, r5
  ; store parameter 'b' from register r6
  mov   r3, bp
  addis r3, -8
  store r3, r6
  ; store parameter 'c' from register r7
  mov   r3, bp
  addis r3, -12
  store r3, r7
  
; load param 'a' (arg1, reg) into r2
  mov   r3, bp
  addis r3, -4
  load  r2, r3
  
; load param 'b' (arg2, reg) into r1
  mov   r3, bp
  addis r3, -8
  load  r1, r3

; addition
  add  r1, r2
  mov r2, r1
  
; load param 'c' (arg3, reg) into r1
  mov   r3, bp
  addis r3, -12
  load  r1, r3

; addition
  add  r1, r2
  
; return
  addis sp, 12
; epilogue
  pop  bp
  mov  pc, lr
