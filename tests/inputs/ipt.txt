struct TypeTable {
    char **typenames;
    int count;
};

typedef int MyInt;

typedef struct {
    char **typenames;
    int count;
} TypeTable;

void print_char(char c) {
}

char *hello_string() {
    return "hello";
}

int add(int a, int b) {
    return a + b;
}

int fact(int n) {
    if (n <= 1) {
        return 1;
    }
    return n * fact(n - 1);
}

void set_zero(int *p) {
    *p = 0;
}

int main() {
    int x = 1;
    x++;
    ++x;
    x--;
    --x;
    int *a = 0;
    signed int *px = &x;
    char y = 'z';
    char *py = &y;
    const unsigned int z = add(x, 2);
    char ch = y;
    char *str = hello_string();

    TypeTable table;
    char *tn = table.typenames;
    TypeTable *ptr_table;
    ptr_table->typenames;

    int arr[5];
    int mat[10][10];

    for (int i = 0; i < a; i++) {
        continue;
        break;
    }

    print_char(ch);
    do_nothing();

    set_zero(&z);

    if (z > 2) {
        while (z > 0) {
            z = z - 1;
        }
        return z;
    } else if (z == 2) {
        for (int i = 0; i < 5; i = i + 1) {
            x = x + i;
        }
        return x;
    } else {
        z = z + 10;
    }

    return 0;
}
